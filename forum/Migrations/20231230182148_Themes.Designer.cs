// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using forum.Models;

#nullable disable

namespace forum.Migrations
{
    [DbContext(typeof(ForumDbContext))]
    [Migration("20231230182148_Themes")]
    partial class Themes
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ForumTheme", b =>
                {
                    b.Property<int>("ForumsForumID")
                        .HasColumnType("int");

                    b.Property<int>("ThemesThemeID")
                        .HasColumnType("int");

                    b.HasKey("ForumsForumID", "ThemesThemeID");

                    b.HasIndex("ThemesThemeID");

                    b.ToTable("ThemesForums", (string)null);
                });

            modelBuilder.Entity("PostPost", b =>
                {
                    b.Property<int>("ReferencedPostsPostID")
                        .HasColumnType("int");

                    b.Property<int>("ReferencingPostsPostID")
                        .HasColumnType("int");

                    b.HasKey("ReferencedPostsPostID", "ReferencingPostsPostID");

                    b.HasIndex("ReferencingPostsPostID");

                    b.ToTable("PostReferences", (string)null);
                });

            modelBuilder.Entity("PostUser", b =>
                {
                    b.Property<int>("PostsPostID")
                        .HasColumnType("int");

                    b.Property<int>("UsersUserID")
                        .HasColumnType("int");

                    b.HasKey("PostsPostID", "UsersUserID");

                    b.HasIndex("UsersUserID");

                    b.ToTable("UsersPosts", (string)null);
                });

            modelBuilder.Entity("forum.Models.FollowedMessages", b =>
                {
                    b.Property<int>("postId")
                        .HasColumnType("int");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.Property<bool>("Archive")
                        .HasColumnType("bit");

                    b.Property<bool>("Lu")
                        .HasColumnType("bit");

                    b.HasKey("postId", "userId");

                    b.HasIndex("userId");

                    b.ToTable("FollowedMessages");
                });

            modelBuilder.Entity("forum.Models.Forum", b =>
                {
                    b.Property<int>("ForumID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ForumID"));

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Titre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ForumID");

                    b.ToTable("Forums");
                });

            modelBuilder.Entity("forum.Models.Post", b =>
                {
                    b.Property<int>("PostID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostID"));

                    b.Property<DateTime>("DateCreationMessage")
                        .HasColumnType("datetime2");

                    b.Property<int>("FilID")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotCle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Sujet")
                        .HasColumnType("bit");

                    b.Property<int>("ThemeId")
                        .HasColumnType("int");

                    b.HasKey("PostID");

                    b.HasIndex("ThemeId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("forum.Models.Theme", b =>
                {
                    b.Property<int>("ThemeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ThemeID"));

                    b.Property<string>("Titre")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("ThemeID");

                    b.HasIndex("Titre")
                        .IsUnique();

                    b.ToTable("Themes");
                });

            modelBuilder.Entity("forum.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<bool>("Actif")
                        .HasColumnType("bit");

                    b.Property<bool>("Admin")
                        .HasColumnType("bit");

                    b.Property<string>("CheminAvatar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Inscrit")
                        .HasColumnType("bit");

                    b.Property<string>("MotDePasse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pseudonyme")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Signature")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Valide")
                        .HasColumnType("bit");

                    b.HasKey("UserID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ForumTheme", b =>
                {
                    b.HasOne("forum.Models.Forum", null)
                        .WithMany()
                        .HasForeignKey("ForumsForumID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("forum.Models.Theme", null)
                        .WithMany()
                        .HasForeignKey("ThemesThemeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PostPost", b =>
                {
                    b.HasOne("forum.Models.Post", null)
                        .WithMany()
                        .HasForeignKey("ReferencedPostsPostID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("forum.Models.Post", null)
                        .WithMany()
                        .HasForeignKey("ReferencingPostsPostID")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PostUser", b =>
                {
                    b.HasOne("forum.Models.Post", null)
                        .WithMany()
                        .HasForeignKey("PostsPostID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("forum.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("forum.Models.FollowedMessages", b =>
                {
                    b.HasOne("forum.Models.Post", "Post")
                        .WithMany("FollowedMessages")
                        .HasForeignKey("postId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("forum.Models.User", "User")
                        .WithMany("FollowedMessages")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("forum.Models.Post", b =>
                {
                    b.HasOne("forum.Models.Theme", "Theme")
                        .WithMany("Posts")
                        .HasForeignKey("ThemeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Theme");
                });

            modelBuilder.Entity("forum.Models.Post", b =>
                {
                    b.Navigation("FollowedMessages");
                });

            modelBuilder.Entity("forum.Models.Theme", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("forum.Models.User", b =>
                {
                    b.Navigation("FollowedMessages");
                });
#pragma warning restore 612, 618
        }
    }
}
